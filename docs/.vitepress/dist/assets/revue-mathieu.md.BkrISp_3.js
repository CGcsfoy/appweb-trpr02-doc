import{_ as a,c as o,o as r,ae as i}from"./chunks/framework.Dh1jimFm.js";const h=JSON.parse('{"title":"Revue de code pour Mathieu Côté","description":"","frontmatter":{},"headers":[],"relativePath":"revue-mathieu.md","filePath":"revue-mathieu.md"}'),t={name:"revue-mathieu.md"};function n(l,e,s,u,d,c){return r(),o("div",null,e[0]||(e[0]=[i('<h1 id="revue-de-code-pour-mathieu-cote" tabindex="-1">Revue de code pour Mathieu Côté <a class="header-anchor" href="#revue-de-code-pour-mathieu-cote" aria-label="Permalink to &quot;Revue de code pour Mathieu Côté&quot;">​</a></h1><hr><h2 id="semaine-1" tabindex="-1">Semaine 1 <a class="header-anchor" href="#semaine-1" aria-label="Permalink to &quot;Semaine 1&quot;">​</a></h2><hr><h3 id="formulaire-de-creation-de-personnage" tabindex="-1">Formulaire de création de personnage <a class="header-anchor" href="#formulaire-de-creation-de-personnage" aria-label="Permalink to &quot;Formulaire de création de personnage&quot;">​</a></h3><ul><li>Le formulaire est bien structuré avec Bootstrap.</li><li>Les messages d’erreur sont présents.</li></ul><p><strong>À améliorer :</strong></p><ul><li>Les champs du formulaire ne sont pas liés à des variables (<code>v-model</code>), donc on ne peut pas facilement récupérer ce que l’utilisateur écrit.</li><li>La validation n’est pas encore faite automatiquement quand on remplit le formulaire.</li></ul><h3 id="composant-formactionbutton-vue" tabindex="-1">Composant <code>FormActionButton.vue</code> <a class="header-anchor" href="#composant-formactionbutton-vue" aria-label="Permalink to &quot;Composant `FormActionButton.vue`&quot;">​</a></h3><ul><li>Le bouton utilise bien des <code>props</code> pour être réutilisable avec différents textes et actions.</li></ul><p><strong>À améliorer :</strong></p><ul><li>Le bouton n’a pas de style visible (pas de classe comme <code>btn</code> ou <code>btn-primary</code>), donc il pourrait avoir un style très simple.</li></ul><hr><h2 id="semaine-2" tabindex="-1">Semaine 2 <a class="header-anchor" href="#semaine-2" aria-label="Permalink to &quot;Semaine 2&quot;">​</a></h2><hr><h3 id="actionbutton" tabindex="-1">ActionButton <a class="header-anchor" href="#actionbutton" aria-label="Permalink to &quot;ActionButton&quot;">​</a></h3><ul><li>Pourrait supporter d’autres props (ex: <code>disabled</code>, <code>aria-label</code>).</li></ul><h3 id="charactercard" tabindex="-1">CharacterCard <a class="header-anchor" href="#charactercard" aria-label="Permalink to &quot;CharacterCard&quot;">​</a></h3><ul><li>Bonne séparation visuelle entre &quot;Personnage&quot; et &quot;Ennemi&quot;.</li><li>Réduire la duplication entre les deux blocs en extrayant les lignes répétées.</li><li>Ajouter un état &quot;inconnu&quot; ou &quot;en chargement&quot; si certaines props ne sont pas encore prêtes.</li></ul><h3 id="scores-dans-la-base-de-donnees" tabindex="-1">Scores dans la base de données <a class="header-anchor" href="#scores-dans-la-base-de-donnees" aria-label="Permalink to &quot;Scores dans la base de données&quot;">​</a></h3><ul><li>Ajouter des messages d&#39;erreur visibles côté utilisateur.</li></ul><h3 id="scoresservice" tabindex="-1">ScoresService <a class="header-anchor" href="#scoresservice" aria-label="Permalink to &quot;ScoresService&quot;">​</a></h3><ul><li>Créer un typage de réponse attendu (au lieu de juste <code>any</code> pour <code>data</code>).</li></ul><h3 id="saveplayerscore-dans-gameview" tabindex="-1">savePlayerScore (dans GameView) <a class="header-anchor" href="#saveplayerscore-dans-gameview" aria-label="Permalink to &quot;savePlayerScore (dans GameView)&quot;">​</a></h3><ul><li>Afficher une confirmation ou un message si l’enregistrement échoue.</li></ul><h3 id="separation-du-code-de-gameview" tabindex="-1">Séparation du code de GameView <a class="header-anchor" href="#separation-du-code-de-gameview" aria-label="Permalink to &quot;Séparation du code de GameView&quot;">​</a></h3><ul><li>Déplacer la logique métier dans un <code>useGame</code> ou <code>useCombat</code> composable.</li><li>Réduire la taille du composant principal (<code>GameView.vue</code>) en fesant plus de composants.</li></ul><hr><h2 id="semaine-3" tabindex="-1">Semaine 3 <a class="header-anchor" href="#semaine-3" aria-label="Permalink to &quot;Semaine 3&quot;">​</a></h2><hr><h3 id="gamelogic" tabindex="-1">GameLogic <a class="header-anchor" href="#gamelogic" aria-label="Permalink to &quot;GameLogic&quot;">​</a></h3><ul><li>Changement de l’ordre des vérifications <code>if (newPlayer.life &lt;= 0)</code> et <code>if (newEnemy.life &lt;= 0)</code> dans la fonction <code>attack()</code>. <ul><li>Avant : l’ennemi était vérifié avant le joueur.</li><li>Maintenant : le joueur est vérifié avant. Cela permet de détecter une mort du joueur même si l’ennemi meurt aussi dans le même round.</li></ul></li><li>Changement de la couleur du bouton de génération d&#39;ennemies pour rester conformes au normes</li></ul><h3 id="global" tabindex="-1">Global <a class="header-anchor" href="#global" aria-label="Permalink to &quot;Global&quot;">​</a></h3><ul><li>Refactoring / Formatage de plusieurs classes pour améliorer la qualité du code dans celles-ci</li></ul>',34)]))}const p=a(t,[["render",n]]);export{h as __pageData,p as default};
